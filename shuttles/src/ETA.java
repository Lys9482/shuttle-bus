
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Random;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author dance
 */
public class ETA extends javax.swing.JFrame {

    /**
     * Creates new form ETA
     */
    public ETA() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        ETABackground = new javax.swing.JPanel();
        ETApanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5ETAHome = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        Bus1Stop1Button = new javax.swing.JButton();
        Bus1Stop2Button = new javax.swing.JButton();
        Bus1Stop3Button = new javax.swing.JButton();
        Bus1Stop4Button = new javax.swing.JButton();
        jToggleButtonStop2Bus2 = new javax.swing.JToggleButton();
        jToggleButtonBus2Stop3 = new javax.swing.JToggleButton();
        jToggleButtonStop4Bus2 = new javax.swing.JToggleButton();
        jLabel5 = new javax.swing.JLabel();
        jToggleButtonStop1Bus2 = new javax.swing.JToggleButton();
        jLabel3 = new javax.swing.JLabel();

        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText("jRadioButtonMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ETABackground.setBackground(new java.awt.Color(137, 207, 240));

        ETApanel.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setIcon(new javax.swing.ImageIcon("C:\\Users\\dance\\Downloads\\logo.png")); // NOI18N
        jLabel2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel2MouseClicked(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(100, 149, 237));
        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("          Home");
        jLabel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(100, 149, 237), 5, true));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
        });

        jLabel5ETAHome.setBackground(new java.awt.Color(100, 149, 237));
        jLabel5ETAHome.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5ETAHome.setText("         ETA");
        jLabel5ETAHome.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(100, 149, 237), 4));
        jLabel5ETAHome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5ETAHomeMouseClicked(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("      Capacity");
        jLabel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(100, 149, 237), 4));
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
        });

        jLabel4.setBackground(new java.awt.Color(250, 250, 250));
        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setText("Log Out");
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout ETApanelLayout = new javax.swing.GroupLayout(ETApanel);
        ETApanel.setLayout(ETApanelLayout);
        ETApanelLayout.setHorizontalGroup(
            ETApanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ETApanelLayout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addComponent(jLabel5ETAHome, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(93, 93, 93)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(51, 51, 51))
        );
        ETApanelLayout.setVerticalGroup(
            ETApanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ETApanelLayout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(ETApanelLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(ETApanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5ETAHome, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Bus1Stop1Button.setBackground(new java.awt.Color(30, 144, 255));
        Bus1Stop1Button.setText("Shuttle Stop 1");
        Bus1Stop1Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bus1Stop1ButtonActionPerformed(evt);
            }
        });

        Bus1Stop2Button.setBackground(new java.awt.Color(30, 144, 255));
        Bus1Stop2Button.setText("Shuttle Stop 2");
        Bus1Stop2Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bus1Stop2ButtonActionPerformed(evt);
            }
        });

        Bus1Stop3Button.setBackground(new java.awt.Color(30, 144, 255));
        Bus1Stop3Button.setText("Shuttle Stop 3");
        Bus1Stop3Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bus1Stop3ButtonActionPerformed(evt);
            }
        });

        Bus1Stop4Button.setBackground(new java.awt.Color(30, 144, 255));
        Bus1Stop4Button.setText("Shuttle Stop 4");
        Bus1Stop4Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Bus1Stop4ButtonActionPerformed(evt);
            }
        });

        jToggleButtonStop2Bus2.setBackground(new java.awt.Color(147, 112, 219));
        jToggleButtonStop2Bus2.setText("Shuttle Stop 2");
        jToggleButtonStop2Bus2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonStop2Bus2ActionPerformed(evt);
            }
        });

        jToggleButtonBus2Stop3.setBackground(new java.awt.Color(147, 112, 219));
        jToggleButtonBus2Stop3.setText("Shuttle Stop 3");
        jToggleButtonBus2Stop3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonBus2Stop3ActionPerformed(evt);
            }
        });

        jToggleButtonStop4Bus2.setBackground(new java.awt.Color(147, 112, 219));
        jToggleButtonStop4Bus2.setText("Shuttle Stop 4");
        jToggleButtonStop4Bus2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonStop4Bus2ActionPerformed(evt);
            }
        });

        jLabel5.setIcon(new javax.swing.ImageIcon("C:\\Users\\dance\\Downloads\\Bus1 (1).png")); // NOI18N
        jLabel5.setText("jLabel5");

        jToggleButtonStop1Bus2.setBackground(new java.awt.Color(147, 112, 219));
        jToggleButtonStop1Bus2.setText("Shuttle Stop 1");
        jToggleButtonStop1Bus2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonStop1Bus2ActionPerformed(evt);
            }
        });

        jLabel3.setIcon(new javax.swing.ImageIcon("C:\\Users\\dance\\Downloads\\Bus2.png")); // NOI18N
        jLabel3.setText("jLabel3");

        javax.swing.GroupLayout ETABackgroundLayout = new javax.swing.GroupLayout(ETABackground);
        ETABackground.setLayout(ETABackgroundLayout);
        ETABackgroundLayout.setHorizontalGroup(
            ETABackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ETApanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(ETABackgroundLayout.createSequentialGroup()
                .addGroup(ETABackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ETABackgroundLayout.createSequentialGroup()
                        .addGap(142, 142, 142)
                        .addGroup(ETABackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Bus1Stop1Button)
                            .addComponent(Bus1Stop2Button)
                            .addComponent(Bus1Stop3Button)
                            .addComponent(Bus1Stop4Button))
                        .addGap(588, 588, 588)
                        .addGroup(ETABackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jToggleButtonStop4Bus2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jToggleButtonBus2Stop3, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jToggleButtonStop2Bus2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jToggleButtonStop1Bus2, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(ETABackgroundLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 478, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(145, 145, 145)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 459, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(164, Short.MAX_VALUE))
        );
        ETABackgroundLayout.setVerticalGroup(
            ETABackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ETABackgroundLayout.createSequentialGroup()
                .addComponent(ETApanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(ETABackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ETABackgroundLayout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jLabel5))
                    .addGroup(ETABackgroundLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)))
                .addGap(18, 18, 18)
                .addGroup(ETABackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Bus1Stop1Button)
                    .addComponent(jToggleButtonStop1Bus2))
                .addGap(18, 18, 18)
                .addGroup(ETABackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Bus1Stop2Button)
                    .addComponent(jToggleButtonStop2Bus2))
                .addGap(35, 35, 35)
                .addGroup(ETABackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Bus1Stop3Button)
                    .addComponent(jToggleButtonBus2Stop3))
                .addGap(30, 30, 30)
                .addGroup(ETABackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Bus1Stop4Button)
                    .addComponent(jToggleButtonStop4Bus2))
                .addContainerGap(1345, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(ETABackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(ETABackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Bus1Stop1ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bus1Stop1ButtonActionPerformed
        // TODO add your handling code here:
                 File file = new File("bus.txt");  
try{
   
   FileReader fr = new FileReader(file);
   BufferedReader br = new BufferedReader(fr);
   String line;
   boolean isLogin = false;
  
   while((line=br.readLine())!=null){
       boolean isBus = false;
       Random rand = new Random();
     
     String busStop = line.split(" ")[2].toLowerCase();
     int numBusStop = Integer.parseInt(busStop);
     if(busStop.equals("1")){
         int busLocation = rand.nextInt(4)+1;
         System.err.println(busLocation + "current shuttle bus location");
         //JOptionPane.showMessageDialog(null, "The current shuttle bus location is at bus stop " + busLocation );
         String milesFrom = line.split(",")[busLocation].toLowerCase();
         System.err.println("The number of miles from the user is " + milesFrom);
         //number of stops bus makes before arriving
         int stops = busLocation + 4;
         String stopsBeforeArrival = line.split(",")[stops].toLowerCase();
         System.err.println("The number of stops the bus makes before arriving is " + stopsBeforeArrival);
         //avgerage time at stops
         int avgStopTime = rand.nextInt(6)+3;
         int speed = 35;
         //calculate time = distance / speed
         //convert milesFrom to int
         int miles = Integer.parseInt(milesFrom);
         int time = miles/speed;
         //convert time from hours to minutes by multiply by 60
         int minTime = time * 60;
         //calculate elapsed time from stops
         //convert stopsBeforeArrival to int
         int stop = Integer.parseInt(stopsBeforeArrival);
         //multiply stop by avgStopTime
         int stopTime = stop * avgStopTime;
         //add time to stops time
         int ETA = minTime + stopTime;
         DateTimeFormatter dtf = DateTimeFormatter.ofPattern("HH:mm a");  
        LocalDateTime now = LocalDateTime.now().plusMinutes(ETA); 
        //LocalDateTime eta = now + ETA;
        //System.out.println(dtf.format(now)); 
         JOptionPane.showMessageDialog(null, "The ETA is " + (dtf.format(now)));
             File f = new File("capacity.txt");

           if(!f.exists()){
               f.createNewFile();
           }
       fr = new FileReader(f);
       BufferedReader buffReader = new BufferedReader(fr);
      line = buffReader.readLine();
    
      
      FileWriter writer = new FileWriter(f,false);
      //BufferedWriter bwrite = new BufferedWriter(write);
      writer.write("Shuttle Bus 1: " + stop);
     //bwrite.write("shuttle bus stop ");
     writer.close();
     
    
     File capFile = new File("BusCapacity.txt");
     if(!capFile.exists()){
         capFile.createNewFile();
     }
     FileWriter Writer = new FileWriter(capFile,true);
      BufferedWriter bwrite = new BufferedWriter(Writer);
       bwrite.write("shuttle bus location: " + busLocation + "User location " + busStop + "number of stops " + stop + '\n');
       bwrite.close();
     
     File etaFile = new File("ETA.txt");
     if(!etaFile.exists()){
         etaFile.createNewFile();
     }
     FileWriter etaWrite = new FileWriter(etaFile,true);
      BufferedWriter etaBw = new BufferedWriter(etaWrite);
     etaBw.write("shuttle bus location: " + busLocation + " User Location: " + busStop + " Distance between stops " + milesFrom + " Speed of shuttle bus: " + speed + " number of stops shuttle makes: " + stopsBeforeArrival + " time at stops: " + avgStopTime + '\n');
     etaBw.close();
         
     }
    
}
 
 
}
 
 catch(IOException e){
  e.printStackTrace();

}  
    }//GEN-LAST:event_Bus1Stop1ButtonActionPerformed

    private void Bus1Stop2ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bus1Stop2ButtonActionPerformed
        // TODO add your handling code here:
           File file = new File("bus.txt");  
try{
   
   FileReader fr = new FileReader(file);
   BufferedReader br = new BufferedReader(fr);
   String line;
   boolean isLogin = false;
  
   while((line=br.readLine())!=null){
       boolean isBus = false;
       Random rand = new Random();
     
     String busStop = line.split(" ")[2].toLowerCase();
     int numBusStop = Integer.parseInt(busStop);
     if(busStop.equals("2")){
         int busLocation = rand.nextInt(4)+1;
         System.err.println(busLocation + "current shuttle bus location");
         //JOptionPane.showMessageDialog(null, "The current shuttle bus location is at bus stop " + busLocation );
         String milesFrom = line.split(",")[busLocation].toLowerCase();
         System.err.println("The number of miles from the user is " + milesFrom);
         //number of stops bus makes before arriving
         int stops = busLocation + 4;
         String stopsBeforeArrival = line.split(",")[stops].toLowerCase();
         System.err.println("The number of stops the bus makes before arriving is " + stopsBeforeArrival);
         //avgerage time at stops
         int avgStopTime = rand.nextInt(6)+3;
         int speed = 35;
         //calculate time = distance / speed
         //convert milesFrom to int
         int miles = Integer.parseInt(milesFrom);
         int time = miles/speed;
         //convert time from hours to minutes by multiply by 60
         int minTime = time * 60;
         //calculate elapsed time from stops
         //convert stopsBeforeArrival to int
         int stop = Integer.parseInt(stopsBeforeArrival);
         //multiply stop by avgStopTime
         int stopTime = stop * avgStopTime;
         //add time to stops time
         int ETA = minTime + stopTime;
         DateTimeFormatter dtf = DateTimeFormatter.ofPattern("HH:mm a");  
        LocalDateTime now = LocalDateTime.now().plusMinutes(ETA); 
        //LocalDateTime eta = now + ETA;
        //System.out.println(dtf.format(now)); 
         JOptionPane.showMessageDialog(null, "The ETA is " + (dtf.format(now)));
             File f = new File("capacity.txt");

           if(!f.exists()){
               f.createNewFile();
           }
       fr = new FileReader(f);
       BufferedReader buffReader = new BufferedReader(fr);
      line = buffReader.readLine();
    
      
      FileWriter writer = new FileWriter(f,false);
      //BufferedWriter bwrite = new BufferedWriter(write);
      writer.write("Shuttle Bus 1: " + stop);
     //bwrite.write("shuttle bus stop ");
     writer.close();
     
     File capFile = new File("BusCapacity.txt");
     if(!capFile.exists()){
         capFile.createNewFile();
     }
     FileWriter Writer = new FileWriter(capFile,true);
      BufferedWriter bwrite = new BufferedWriter(Writer);
       bwrite.write("shuttle bus location: " + busLocation + "User location " + busStop + "number of stops " + stop + '\n');
     bwrite.close();
      
     File etaFile = new File("ETA.txt");
     if(!etaFile.exists()){
         etaFile.createNewFile();
     }
     FileWriter etaWrite = new FileWriter(etaFile,true);
      BufferedWriter etaBw = new BufferedWriter(etaWrite);
     etaBw.write("shuttle bus location: " + busLocation + " User Location: " + busStop + " Distance between stops " + milesFrom + " Speed of shuttle bus: " + speed + " number of stops shuttle makes: " + stopsBeforeArrival + " time at stops: " + avgStopTime + '\n');
     etaBw.close();
     
     }
     
    
}
 
 
}
 
 catch(IOException e){
  e.printStackTrace();

}
    }//GEN-LAST:event_Bus1Stop2ButtonActionPerformed

    private void Bus1Stop3ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bus1Stop3ButtonActionPerformed
        // TODO add your handling code here:
                   File file = new File("bus.txt");  
try{
   
   FileReader fr = new FileReader(file);
   BufferedReader br = new BufferedReader(fr);
   String line;
   boolean isLogin = false;
  
   while((line=br.readLine())!=null){
       boolean isBus = false;
       Random rand = new Random();
     
     String busStop = line.split(" ")[2].toLowerCase();
     int numBusStop = Integer.parseInt(busStop);
     if(busStop.equals("3")){
         int busLocation = rand.nextInt(4)+1;
         System.err.println(busLocation + "current shuttle bus location");
         //JOptionPane.showMessageDialog(null, "The current shuttle bus location is at bus stop " + busLocation );
         String milesFrom = line.split(",")[busLocation].toLowerCase();
         System.err.println("The number of miles from the user is " + milesFrom);
         //number of stops bus makes before arriving
         int stops = busLocation + 4;
         String stopsBeforeArrival = line.split(",")[stops].toLowerCase();
         System.err.println("The number of stops the bus makes before arriving is " + stopsBeforeArrival);
         //avgerage time at stops
         int avgStopTime = rand.nextInt(6)+3;
         int speed = 35;
         //calculate time = distance / speed
         //convert milesFrom to int
         int miles = Integer.parseInt(milesFrom);
         int time = miles/speed;
         //convert time from hours to minutes by multiply by 60
         int minTime = time * 60;
         //calculate elapsed time from stops
         //convert stopsBeforeArrival to int
         int stop = Integer.parseInt(stopsBeforeArrival);
         //multiply stop by avgStopTime
         int stopTime = stop * avgStopTime;
         //add time to stops time
         int ETA = minTime + stopTime;
         DateTimeFormatter dtf = DateTimeFormatter.ofPattern("HH:mm a");  
        LocalDateTime now = LocalDateTime.now().plusMinutes(ETA); 
        //LocalDateTime eta = now + ETA;
        //System.out.println(dtf.format(now)); 
         JOptionPane.showMessageDialog(null, "The ETA is " + (dtf.format(now)));
             File f = new File("capacity.txt");

           if(!f.exists()){
               f.createNewFile();
           }
       fr = new FileReader(f);
       BufferedReader buffReader = new BufferedReader(fr);
      line = buffReader.readLine();
    
      
      FileWriter writer = new FileWriter(f,false);
      //BufferedWriter bwrite = new BufferedWriter(write);
      writer.write("Shuttle Bus 1: " + stop);
     //bwrite.write("shuttle bus stop ");
     writer.close();
     
     File capFile = new File("BusCapacity.txt");
     if(!capFile.exists()){
         capFile.createNewFile();
     }
     FileWriter Writer = new FileWriter(capFile,true);
      BufferedWriter bwrite = new BufferedWriter(Writer);
       bwrite.write("shuttle bus location: " + busLocation + "User location " + busStop + "number of stops " + stop + '\n');
     bwrite.close();
      
     File etaFile = new File("ETA.txt");
     if(!etaFile.exists()){
         etaFile.createNewFile();
     }
     FileWriter etaWrite = new FileWriter(etaFile,true);
      BufferedWriter etaBw = new BufferedWriter(etaWrite);
     etaBw.write("shuttle bus location: " + busLocation + " User Location: " + busStop + " Distance between stops " + milesFrom + " Speed of shuttle bus: " + speed + " number of stops shuttle makes: " + stopsBeforeArrival + " time at stops: " + avgStopTime + '\n');
     etaBw.close();
         
     }
    
}
 
 
}
 
 catch(IOException e){
  e.printStackTrace();

}
    }//GEN-LAST:event_Bus1Stop3ButtonActionPerformed

    private void Bus1Stop4ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Bus1Stop4ButtonActionPerformed
        // TODO add your handling code here:
                   File file = new File("bus.txt");  
try{
   
   FileReader fr = new FileReader(file);
   BufferedReader br = new BufferedReader(fr);
   String line;
   boolean isLogin = false;
   
   while((line=br.readLine())!=null){
       boolean isBus = false;
       Random rand = new Random();
     
     String busStop = line.split(" ")[2].toLowerCase();
     int numBusStop = Integer.parseInt(busStop);
    
     if(busStop.equals("4")){
         
         int busLocation = rand.nextInt(4)+1;
         System.err.println(busLocation + "current shuttle bus location");
         //JOptionPane.showMessageDialog(null, "The current shuttle bus location is at bus stop " + busLocation );
         String milesFrom = line.split(",")[busLocation].toLowerCase();
         System.err.println("The number of miles from the user is " + milesFrom);
         //number of stops bus makes before arriving
         int stops = busLocation + 4;
         String stopsBeforeArrival = line.split(",")[stops].toLowerCase();
         System.err.println("The number of stops the bus makes before arriving is " + stopsBeforeArrival);
      
         //avgerage time at stops
         int avgStopTime = rand.nextInt(6)+3;
         int speed = 35;
         //calculate time = distance / speed
         //convert milesFrom to int
         int miles = Integer.parseInt(milesFrom);
         int time = miles/speed;
         //convert time from hours to minutes by multiply by 60
         int minTime = time * 60;
         //calculate elapsed time from stops
         //convert stopsBeforeArrival to int
         int stop = Integer.parseInt(stopsBeforeArrival);
         //multiply stop by avgStopTime
         int stopTime = stop * avgStopTime;
         //add time to stops time
         int ETA = minTime + stopTime;
         DateTimeFormatter dtf = DateTimeFormatter.ofPattern("HH:mm a");  
        LocalDateTime now = LocalDateTime.now().plusMinutes(ETA); 
        //LocalDateTime eta = now + ETA;
        //System.out.println(dtf.format(now)); 
         JOptionPane.showMessageDialog(null, "The ETA is " + (dtf.format(now)));
         File f = new File("capacity.txt");

           if(!f.exists()){
               f.createNewFile();
           }
       fr = new FileReader(f);
       BufferedReader buffReader = new BufferedReader(fr);
      line = buffReader.readLine();
    
      
      FileWriter writer = new FileWriter(f,false);
      //BufferedWriter bwrite = new BufferedWriter(write);
      writer.write("Shuttle Bus 1: " + stop);
     //bwrite.write("shuttle bus stop ");
     writer.close();
     
     File capFile = new File("BusCapacity.txt");
     if(!capFile.exists()){
         capFile.createNewFile();
     }
     FileWriter Writer = new FileWriter(capFile,true);
      BufferedWriter bwrite = new BufferedWriter(Writer);
       bwrite.write("shuttle bus location: " + busLocation + "User location " + busStop + "number of stops " + stop + '\n');
     bwrite.close();
     
     File etaFile = new File("ETA.txt");
     if(!etaFile.exists()){
         etaFile.createNewFile();
     }
     FileWriter etaWrite = new FileWriter(etaFile,true);
      BufferedWriter etaBw = new BufferedWriter(etaWrite);
     etaBw.write("shuttle bus location: " + busLocation + " User Location: " + busStop + " Distance between stops " + milesFrom + " Speed of shuttle bus: " + speed + " number of stops shuttle makes: " + stopsBeforeArrival + " time at stops: " + avgStopTime + '\n');
     etaBw.close();
  
}
 
   }
}
 
 catch(IOException e){
  e.printStackTrace();

}

    }//GEN-LAST:event_Bus1Stop4ButtonActionPerformed

    private void jLabel5ETAHomeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5ETAHomeMouseClicked
        // TODO add your handling code here:
        ETA eta = new ETA();
        eta.setVisible(true);
        eta.pack();
        eta.setLocationRelativeTo(null);
       // register.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
       this.dispose();
    }//GEN-LAST:event_jLabel5ETAHomeMouseClicked

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        // TODO add your handling code here:
        Capacity capacity = new Capacity();
        capacity.setVisible(true);
        capacity.pack();
        capacity.setLocationRelativeTo(null);
       // register.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
       this.dispose();
    }//GEN-LAST:event_jLabel6MouseClicked

    private void jToggleButtonStop1Bus2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonStop1Bus2ActionPerformed
        // TODO add your handling code here:
        File file = new File("bus.txt");  
try{
   
   FileReader fr = new FileReader(file);
   BufferedReader br = new BufferedReader(fr);
   String line;
   boolean isLogin = false;
  
   while((line=br.readLine())!=null){
       boolean isBus = false;
       Random rand = new Random();
     
     String busStop = line.split(" ")[2].toLowerCase();
     int numBusStop = Integer.parseInt(busStop);
     if(busStop.equals("1")){
         int busLocation = rand.nextInt(4)+1;
         System.err.println(busLocation + "current shuttle bus location");
         //JOptionPane.showMessageDialog(null, "The current shuttle bus location is at bus stop " + busLocation );
         String milesFrom = line.split(",")[busLocation].toLowerCase();
         System.err.println("The number of miles from the user is " + milesFrom);
         //number of stops bus makes before arriving
         int stops = busLocation + 4;
         String stopsBeforeArrival = line.split(",")[stops].toLowerCase();
         System.err.println("The number of stops the bus makes before arriving is " + stopsBeforeArrival);
         //avgerage time at stops
         int avgStopTime = rand.nextInt(6)+3;
         int speed = 35;
         //calculate time = distance / speed
         //convert milesFrom to int
         int miles = Integer.parseInt(milesFrom);
         int time = miles/speed;
         //convert time from hours to minutes by multiply by 60
         int minTime = time * 60;
         //calculate elapsed time from stops
         //convert stopsBeforeArrival to int
         int stop = Integer.parseInt(stopsBeforeArrival);
         //multiply stop by avgStopTime
         int stopTime = stop * avgStopTime;
         //add time to stops time
         int ETA = minTime + stopTime;
         DateTimeFormatter dtf = DateTimeFormatter.ofPattern("HH:mm a");  
        LocalDateTime now = LocalDateTime.now().plusMinutes(ETA); 
        //LocalDateTime eta = now + ETA;
        //System.out.println(dtf.format(now)); 
         JOptionPane.showMessageDialog(null, "The ETA is " + (dtf.format(now)));
             File f = new File("capacity.txt");

           if(!f.exists()){
               f.createNewFile();
           }
       fr = new FileReader(f);
       BufferedReader buffReader = new BufferedReader(fr);
      line = buffReader.readLine();
    
      
      FileWriter writer = new FileWriter(f,false);
      //BufferedWriter bwrite = new BufferedWriter(write);
      writer.write("Shuttle Bus 2: " + stop);
     //bwrite.write("shuttle bus stop ");
     writer.close();
     
     File capFile = new File("BusCapacity.txt");
     if(!capFile.exists()){
         capFile.createNewFile();
     }
     FileWriter Writer = new FileWriter(capFile,true);
      BufferedWriter bwrite = new BufferedWriter(Writer);
       bwrite.write("shuttle bus location: " + busLocation + "User location " + busStop + "number of stops " + stop + '\n');
     bwrite.close();
     
     File etaFile = new File("ETA.txt");
     if(!etaFile.exists()){
         etaFile.createNewFile();
     }
     FileWriter etaWrite = new FileWriter(etaFile,true);
      BufferedWriter etaBw = new BufferedWriter(etaWrite);
     etaBw.write("shuttle bus location: " + busLocation + " User Location: " + busStop + " Distance between stops " + milesFrom + " Speed of shuttle bus: " + speed + " number of stops shuttle makes: " + stopsBeforeArrival + " time at stops: " + avgStopTime + '\n');
     etaBw.close();
         
     }
    
}
 
 
}
 
 catch(IOException e){
  e.printStackTrace();

}  
    }//GEN-LAST:event_jToggleButtonStop1Bus2ActionPerformed

    private void jToggleButtonStop2Bus2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonStop2Bus2ActionPerformed
        // TODO add your handling code here:
        File file = new File("bus.txt");  
try{
   
   FileReader fr = new FileReader(file);
   BufferedReader br = new BufferedReader(fr);
   String line;
   boolean isLogin = false;
  
   while((line=br.readLine())!=null){
       boolean isBus = false;
       Random rand = new Random();
     
     String busStop = line.split(" ")[2].toLowerCase();
     int numBusStop = Integer.parseInt(busStop);
     if(busStop.equals("2")){
         int busLocation = rand.nextInt(4)+1;
         System.err.println(busLocation + "current shuttle bus location");
         //JOptionPane.showMessageDialog(null, "The current shuttle bus location is at bus stop " + busLocation );
         String milesFrom = line.split(",")[busLocation].toLowerCase();
         System.err.println("The number of miles from the user is " + milesFrom);
         //number of stops bus makes before arriving
         int stops = busLocation + 4;
         String stopsBeforeArrival = line.split(",")[stops].toLowerCase();
         System.err.println("The number of stops the bus makes before arriving is " + stopsBeforeArrival);
         //avgerage time at stops
         int avgStopTime = rand.nextInt(6)+3;
         int speed = 35;
         //calculate time = distance / speed
         //convert milesFrom to int
         int miles = Integer.parseInt(milesFrom);
         int time = miles/speed;
         //convert time from hours to minutes by multiply by 60
         int minTime = time * 60;
         //calculate elapsed time from stops
         //convert stopsBeforeArrival to int
         int stop = Integer.parseInt(stopsBeforeArrival);
         //multiply stop by avgStopTime
         int stopTime = stop * avgStopTime;
         //add time to stops time
         int ETA = minTime + stopTime;
         DateTimeFormatter dtf = DateTimeFormatter.ofPattern("HH:mm a");  
        LocalDateTime now = LocalDateTime.now().plusMinutes(ETA); 
        //LocalDateTime eta = now + ETA;
        //System.out.println(dtf.format(now)); 
         JOptionPane.showMessageDialog(null, "The ETA is " + (dtf.format(now)));
             File f = new File("capacity.txt");

           if(!f.exists()){
               f.createNewFile();
           }
       fr = new FileReader(f);
       BufferedReader buffReader = new BufferedReader(fr);
      line = buffReader.readLine();
    
      
      FileWriter writer = new FileWriter(f,false);
      //BufferedWriter bwrite = new BufferedWriter(write);
      writer.write("Shuttle Bus 2: " + stop);
     //bwrite.write("shuttle bus stop ");
     writer.close();
     
     File capFile = new File("BusCapacity.txt");
     if(!capFile.exists()){
         capFile.createNewFile();
     }
     FileWriter Writer = new FileWriter(capFile,true);
      BufferedWriter bwrite = new BufferedWriter(Writer);
       bwrite.write("shuttle bus location: " + busLocation + "User location " + busStop + "number of stops " + stop + '\n');
     bwrite.close();
     
     File etaFile = new File("ETA.txt");
     if(!etaFile.exists()){
         etaFile.createNewFile();
     }
     FileWriter etaWrite = new FileWriter(etaFile,true);
      BufferedWriter etaBw = new BufferedWriter(etaWrite);
     etaBw.write("shuttle bus location: " + busLocation + " User Location: " + busStop + " Distance between stops " + milesFrom + " Speed of shuttle bus: " + speed + " number of stops shuttle makes: " + stopsBeforeArrival + " time at stops: " + avgStopTime + '\n');
     etaBw.close();
         
     }
    
}
 
 
}
 
 catch(IOException e){
  e.printStackTrace();

}  
    }//GEN-LAST:event_jToggleButtonStop2Bus2ActionPerformed

    private void jToggleButtonBus2Stop3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonBus2Stop3ActionPerformed
        // TODO add your handling code here:
        File file = new File("bus.txt");  
try{
   
   FileReader fr = new FileReader(file);
   BufferedReader br = new BufferedReader(fr);
   String line;
   boolean isLogin = false;
  
   while((line=br.readLine())!=null){
       boolean isBus = false;
       Random rand = new Random();
     
     String busStop = line.split(" ")[2].toLowerCase();
     int numBusStop = Integer.parseInt(busStop);
     if(busStop.equals("3")){
         int busLocation = rand.nextInt(4)+1;
         System.err.println(busLocation + "current shuttle bus location");
         //JOptionPane.showMessageDialog(null, "The current shuttle bus location is at bus stop " + busLocation );
         String milesFrom = line.split(",")[busLocation].toLowerCase();
         System.err.println("The number of miles from the user is " + milesFrom);
         //number of stops bus makes before arriving
         int stops = busLocation + 4;
         String stopsBeforeArrival = line.split(",")[stops].toLowerCase();
         System.err.println("The number of stops the bus makes before arriving is " + stopsBeforeArrival);
         //avgerage time at stops
         int avgStopTime = rand.nextInt(6)+3;
         int speed = 35;
         //calculate time = distance / speed
         //convert milesFrom to int
         int miles = Integer.parseInt(milesFrom);
         int time = miles/speed;
         //convert time from hours to minutes by multiply by 60
         int minTime = time * 60;
         //calculate elapsed time from stops
         //convert stopsBeforeArrival to int
         int stop = Integer.parseInt(stopsBeforeArrival);
         //multiply stop by avgStopTime
         int stopTime = stop * avgStopTime;
         //add time to stops time
         int ETA = minTime + stopTime;
         DateTimeFormatter dtf = DateTimeFormatter.ofPattern("HH:mm a");  
        LocalDateTime now = LocalDateTime.now().plusMinutes(ETA); 
        //LocalDateTime eta = now + ETA;
        //System.out.println(dtf.format(now)); 
         JOptionPane.showMessageDialog(null, "The ETA is " + (dtf.format(now)));
             File f = new File("capacity.txt");

           if(!f.exists()){
               f.createNewFile();
           }
       fr = new FileReader(f);
       BufferedReader buffReader = new BufferedReader(fr);
      line = buffReader.readLine();
    
      
      FileWriter writer = new FileWriter(f,false);
      //BufferedWriter bwrite = new BufferedWriter(write);
      writer.write("Shuttle Bus 2: " + stop);
     //bwrite.write("shuttle bus stop ");
     writer.close();
     
    File capFile = new File("BusCapacity.txt");
     if(!capFile.exists()){
         capFile.createNewFile();
     }
     FileWriter Writer = new FileWriter(capFile,true);
      BufferedWriter bwrite = new BufferedWriter(Writer);
       bwrite.write("shuttle bus location: " + busLocation + "User location " + busStop + "number of stops " + stop + '\n');
     bwrite.close();
     
     File etaFile = new File("ETA.txt");
     if(!etaFile.exists()){
         etaFile.createNewFile();
     }
     FileWriter etaWrite = new FileWriter(etaFile,true);
      BufferedWriter etaBw = new BufferedWriter(etaWrite);
      etaBw.write("shuttle bus location: " + busLocation + " User Location: " + busStop + " Distance between stops " + milesFrom + " Speed of shuttle bus: " + speed + " number of stops shuttle makes: " + stopsBeforeArrival + " time at stops: " + avgStopTime + '\n');
     etaBw.close();
         
     }
    
}
 
 
}
 
 catch(IOException e){
  e.printStackTrace();

}  
    }//GEN-LAST:event_jToggleButtonBus2Stop3ActionPerformed

    private void jToggleButtonStop4Bus2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonStop4Bus2ActionPerformed
        // TODO add your handling code here:
        File file = new File("bus.txt"); 
        
try{
   
   FileReader fr = new FileReader(file);
   BufferedReader br = new BufferedReader(fr);
   String line;
   boolean isLogin = false;
  
   while((line=br.readLine())!=null){
       boolean isBus = false;
       Random rand = new Random();
     
     String busStop = line.split(" ")[2].toLowerCase();
     int numBusStop = Integer.parseInt(busStop);
     if(busStop.equals("4")){
         int busLocation = rand.nextInt(4)+1;
         System.err.println(busLocation + "current shuttle bus location");
         //JOptionPane.showMessageDialog(null, "The current shuttle bus location is at bus stop " + busLocation );
         String milesFrom = line.split(",")[busLocation].toLowerCase();
         System.err.println("The number of miles from the user is " + milesFrom);
         //number of stops bus makes before arriving
         int stops = busLocation + 4;
         String stopsBeforeArrival = line.split(",")[stops].toLowerCase();
         System.err.println("The number of stops the bus makes before arriving is " + stopsBeforeArrival);
         //avgerage time at stops
         int avgStopTime = rand.nextInt(6)+3;
         int speed = 35;
         //calculate time = distance / speed
         //convert milesFrom to int
         int miles = Integer.parseInt(milesFrom);
         int time = miles/speed;
         //convert time from hours to minutes by multiply by 60
         int minTime = time * 60;
         //calculate elapsed time from stops
         //convert stopsBeforeArrival to int
         int stop = Integer.parseInt(stopsBeforeArrival);
         //multiply stop by avgStopTime
         int stopTime = stop * avgStopTime;
         //add time to stops time
         int ETA = minTime + stopTime;
         //actual time
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("HH:mm a");  
        LocalDateTime now = LocalDateTime.now().plusMinutes(ETA); 
        //LocalDateTime eta = now + ETA;
        //System.out.println(dtf.format(now)); 
         JOptionPane.showMessageDialog(null, "The ETA is " + (dtf.format(now)));
             File f = new File("capacity.txt");

           if(!f.exists()){
               f.createNewFile();
           }
       fr = new FileReader(f);
       BufferedReader buffReader = new BufferedReader(fr);
      line = buffReader.readLine();
    
      
      FileWriter writer = new FileWriter(f,false);
      //BufferedWriter bwrite = new BufferedWriter(write);
      writer.write("Shuttle Bus 2: " + stop);
     //bwrite.write("shuttle bus stop ");
     writer.close();
     
     File capFile = new File("BusCapacity.txt");

           if(!capFile.exists()){
               capFile.createNewFile();
           }
      
      FileWriter Writer = new FileWriter(capFile,true);
      BufferedWriter bwrite = new BufferedWriter(Writer);
       bwrite.write("shuttle bus location: " + busLocation + "User location " + busStop + "number of stops " + stop + '\n');
     bwrite.close();
     
     File etaFile = new File("ETA.txt");
     if(!etaFile.exists()){
         etaFile.createNewFile();
     }
     FileWriter etaWrite = new FileWriter(etaFile,true);
     BufferedWriter etaBw = new BufferedWriter(etaWrite);
     etaBw.write("shuttle bus location: " + busLocation + " User Location: " + busStop + " Distance between stops " + milesFrom + " Speed of shuttle bus: " + speed + " number of stops shuttle makes: " + stopsBeforeArrival + " time at stops: " + avgStopTime + '\n');
     etaBw.close();
         
     }
    
}
 
 
}
 
 catch(IOException e){
  e.printStackTrace();

}  
    }//GEN-LAST:event_jToggleButtonStop4Bus2ActionPerformed

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        // TODO add your handling code here:
        homepage homePage = new homepage();
        homePage.setVisible(true);
        homePage.pack();
        homePage.setLocationRelativeTo(null);
       // register.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
       this.dispose();
    }//GEN-LAST:event_jLabel1MouseClicked

    private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel2MouseClicked
        // TODO add your handling code here:
        homepage homePage = new homepage();
        homePage.setVisible(true);
        homePage.pack();
        homePage.setLocationRelativeTo(null);
       // register.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
       this.dispose();
    }//GEN-LAST:event_jLabel2MouseClicked

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        // TODO add your handling code here:
        index index = new index();
        index.setVisible(true);
        index.pack();
        index.setLocationRelativeTo(null);
       // index.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
       this.dispose();
    }//GEN-LAST:event_jLabel4MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ETA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ETA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ETA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ETA.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ETA().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Bus1Stop1Button;
    private javax.swing.JButton Bus1Stop2Button;
    private javax.swing.JButton Bus1Stop3Button;
    private javax.swing.JButton Bus1Stop4Button;
    private javax.swing.JPanel ETABackground;
    private javax.swing.JPanel ETApanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel5ETAHome;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JToggleButton jToggleButtonBus2Stop3;
    private javax.swing.JToggleButton jToggleButtonStop1Bus2;
    private javax.swing.JToggleButton jToggleButtonStop2Bus2;
    private javax.swing.JToggleButton jToggleButtonStop4Bus2;
    // End of variables declaration//GEN-END:variables
}
